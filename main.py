#!/usr/bin/env python3
import os
import sys
from typing import Tuple, Union
import shlex
import random
import platform
import discord
from discord.ui import Button
from buttons import WhoamiCommandView, VoteCommandView
from config import Config, ReactionTrigger
from player import Player
import command_help
import mapparser
import casino
import dialog_manager as dialog


config_name = "botconfig.cfg"
scriptDir = os.path.dirname(os.path.realpath(__file__))
configPath = os.path.join(scriptDir, config_name)
fallbackConfigPath = os.path.join(scriptDir, "config_example.cfg")
config = Config(configPath if os.path.exists(configPath) else fallbackConfigPath)
intents = discord.Intents.all()
client = discord.Client(intents=intents)

blackjack = casino.Blackjack()


async def get_map_and_player(message: discord.Message) -> (
        Union[Tuple[mapparser.Map, Player], None]
    ):
    try:
        gameMap = mapparser.Map(config.MapConfig.path)
        player = gameMap.get_player(message.author.display_name, message.author.id)

        return (gameMap, player)
    except mapparser.MapObjectNotFoundException:
        await message.channel.send("–¢—ã –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—à—å.")
        return None
    except mapparser.MapObjectWrongIDException:
        await message.channel.send("–¢—ã –º–µ–Ω—è –æ–±–º–∞–Ω—É—Ç—å –ø—ã—Ç–∞–µ—à—å—Å—è?")
        return None

async def get_reaction_trigger_data(payload: discord.RawReactionActionEvent) -> (
        Union[Tuple[discord.Role, discord.Member, str], None]
    ):
    trigger: Union[ReactionTrigger, None] = \
        config.BotConfig.search_reaction_trigger(message_id=payload.message_id)
    if trigger is not None:
        emoji = payload.emoji.id or payload.emoji.name
        emoji = str(emoji)
        if emoji in trigger.emojis:
            reaction_role, reaction_message = trigger.get_data_by_emoji(emoji)

            guild = client.get_guild(payload.guild_id)
            role = guild.get_role(reaction_role)
            member = guild.get_member(payload.user_id)
            return (role, member, reaction_message)
    return None

@client.event
async def on_ready():
    if os.path.exists(".rst"):
        with open(".rst", "r") as f:
            channel: discord.channel.TextChannel = client.get_channel(int(f.read()))
        await channel.send("–ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ –∑–∞–≤–µ—Ä—à—ë–Ω.")
        os.remove(".rst")
    print(f'We have logged in as {client.user}')
    await client.change_presence(activity=discord.Game(name="–Ω–∞–ø–∏—à–∏ .–ø–æ–º–æ–≥–∏"))


@client.event
async def on_raw_reaction_add(payload: discord.RawReactionActionEvent):
    search_result = await get_reaction_trigger_data(payload)
    if search_result is None:
        return
    role, member, reaction_message = search_result
    await member.add_roles(role)
    await member.send(reaction_message.split("/")[0])

@client.event
async def on_raw_reaction_remove(payload: discord.RawReactionActionEvent):
    search_result = await get_reaction_trigger_data(payload)
    if search_result is None:
        return
    role, member, reaction_message = search_result
    await member.remove_roles(role)
    await member.send(reaction_message.split("/")[1])

@client.event
async def on_message(message: discord.Message):
    if message.author == client.user:
        return

    #region [user commands]

    if message.content.lower().startswith(config.BotConfig.prefix + "–ø–æ–º–æ–≥–∏"):
        game_map = mapparser.Map(config.MapConfig.path)
        player = game_map.get_player(message.author.display_name, message.author.id)

        splitted_message = message.content.split()
        if len(splitted_message) == 1:
            await message.channel.send(command_help.get_commands(player=player))
        elif len(splitted_message) >= 2:
            if splitted_message[1] == "–º–Ω–µ":
                await message.channel.send("–°–∞–º —Å–ø—Ä–∞–≤–∏—à—å—Å—è.")
            elif splitted_message[1] == "–∞–¥–º–∏–Ω—É":
                if str(message.author.id) in config.BotConfig.admins:
                    await message.channel.send(
                        command_help.get_admin_command(
                            splitted_message[2] if len(splitted_message) >= 3 else None
                        )
                    )
                else:
                    await message.channel.send("–¢—ã –∫—Ç–æ –≤–æ–æ–±—â–µ —Ç–∞–∫–æ–π?")
            else:
                await message.channel.send(command_help.get_commands(" ".join(splitted_message[1::]), player))

    elif message.content.lower().startswith(
        (config.BotConfig.prefix + '–∫—Ç–æ —è', config.BotConfig.prefix + '—è –∫—Ç–æ')
        ):
        data = await get_map_and_player(message)
        if data is not None:
            game_map, player = data
            view = WhoamiCommandView(game_map, player, message.author, False)
            view.message = await message.reply(
                dialog.get_player_info_string(game_map, player),
                view=view)

    elif message.content.lower().startswith(config.BotConfig.prefix + '–ø–æ–∫–∞–∂–∏'):
        data = await get_map_and_player(message)
        if data is not None:
            _, player = data
            args = message.content.lower().split()
            if len(args) == 2:
                if args[1] in ["—Å–∫–∏–ª–ª—ã", "—Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç–∏", "–æ—Å–æ–±–µ–Ω–Ω–æ—Å—Ç–∏",
                               "–Ω–∞–≤—ã–∫–∏", "—Å–ø–µ–ª–ª—ã", "–∞–±–∏–ª–∫–∏"]:
                    await dialog.send_abilities(message, player)
                elif args[1] in ["–∏–Ω–≤–µ–Ω—Ç–∞—Ä—å", "—à–º–æ—Ç–∫–∏", "—Ä—é–∫–∑–∞–∫"]:
                    await dialog.send_player_inventory(message, player)
                elif args[1] in ["–∫–æ–ª–æ–¥—É"]:
                    if str(message.author.id) not in config.BotConfig.admins:
                        await message.channel.send("–†–∞–∑–º–µ—á—Ç–∞–ª—Å—è.")
                        return
                    await message.author.send(
                        "`" + ", ".join([i.replace("\\", "") for i in blackjack.deck]) + "`"
                    )
                else:
                    await message.channel.send(
                        f'–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –∫–æ–º–∞–Ω–¥—ã:\n{command_help.get_commands("–ø–æ–∫–∞–∂–∏")}'
                    )
            else:
                await message.channel.send(
                    f'–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –∫–æ–º–∞–Ω–¥—ã:\n{command_help.get_commands("–ø–æ–∫–∞–∂–∏")}'
                )

    elif message.content.lower().startswith(config.BotConfig.prefix + '–≥–¥–µ —è'):
        data = await get_map_and_player(message)
        if data is not None:
            game_map, player = data
            view = WhoamiCommandView(game_map, player, message.author, True)
            view.message = await message.reply(
                dialog.get_player_position_string(game_map, player),
                view=view)

    elif message.content.lower().startswith(config.BotConfig.prefix + "–≥—Ä—É–ø–ø–∞"):
        ingame: bool = False
        groupRole: discord.Role = None
        for role in message.author.roles:
            if role.name.startswith("–≤ –∏–≥—Ä–µ"):
                ingame = True
            elif role.name.startswith("–≥—Ä—É–ø–ø–∞"):
                groupRole = role
                break

        if not ingame:
            await message.channel.send("–¢—ã –Ω–µ –≤ –∏–≥—Ä–µ.")
            return

        game_map = mapparser.Map(config.MapConfig.path)
        groupMembers = list(groupRole.members) if groupRole is not None else [message.author]
        msg = "```ansi\n"

        for member in groupMembers:
            player = game_map.get_player(member.display_name, member.id)
            msg += f"{member.display_name}: <[31m{player.HP}/{player.maxHP}[0m> "
            if player.maxMP > 0:
                msg += f"<[34m{player.MP}/{player.maxMP}[0m>"
            msg += "\n"

        msg += "\n```"
        await message.channel.send(msg)

    #endregion

    #region [admin commands]

    elif message.content.lower().startswith(config.BotConfig.prefix + '–∏–Ω–≤–µ–Ω—Ç–∞—Ä—å'):
        if str(message.author.id) not in config.BotConfig.admins:
            await message.channel.send("–¢—ã –∫–∞–∫ —Å—é–¥–∞ –ø–æ–ø–∞–ª, —à–∏–∑–∞–Ω—É—Ç—ã–π?")
            return

        if len(message.content.split("\n")) < 2:
            if len(message.content.split()) >= 2:
                game_map = mapparser.Map(config.MapConfig.path)
                try:
                    inv = game_map.get_objects_inventory(" ".join(message.content.split()[1::]))
                    await dialog.send_formatted_inventory(message, inv, format_inventory=False)
                except mapparser.MapObjectNotFoundException:
                    await message.channel.send("–û–±—ä–µ–∫—Ç–∞ —Å —Ç–∞–∫–∏–º –∏–º–µ–Ω–µ–º –Ω–µ—Ç –Ω–∞ –∫–∞—Ä—Ç–µ.")
                    return
            else:
                await message.channel.send("–ê –∏–Ω–≤–µ–Ω—Ç–∞—Ä—å-—Ç–æ –≥–¥–µ?")
        else:
            await dialog.send_formatted_inventory(message, message.content.split("\n")[1::])

    elif message.content.lower().startswith(config.BotConfig.prefix + "–ø–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏"):
        if str(message.author.id) not in config.BotConfig.admins:
            await message.channel.send("–¢—ã –∫–∞–∫ —Å—é–¥–∞ –ø–æ–ø–∞–ª, —à–∏–∑–∞–Ω—É—Ç—ã–π?")
            return

        await message.channel.send("R.E.S.T.A.R.T protocol engaged...")

        with open(".rst", "w") as f:
            f.write(str(message.channel.id))

        if platform.system() == "Linux":
            os.execv(__file__, sys.argv)
        elif platform.system() == "Windows":
            os.execv(sys.executable, ["python"] + sys.argv)

    elif message.content.lower().startswith(config.BotConfig.prefix + "–≤—ã–±–µ—Ä–∏"):
        if str(message.author.id) not in config.BotConfig.admins:
            await message.channel.send("–¢—ã –∫–∞–∫ —Å—é–¥–∞ –ø–æ–ø–∞–ª, —à–∏–∑–∞–Ω—É—Ç—ã–π?")
            return

        args = message.content.split()
        if len(args) >= 2:
            game_map = mapparser.Map(config.MapConfig.path)
            if args[1] == "–∏–≥—Ä–æ–∫–∞":
                await message.delete()

                candidates = []
                try:
                    levelNeeded: int = int(args[2]) if len(args) >= 3 and not args[2].startswith("<@&") else 0
                    excludeRole: discord.Role = message.role_mentions[0] if message.role_mentions else None

                    for user in message.guild.members:
                        if user.status == discord.Status.online and \
                        excludeRole not in user.roles:
                            try:
                                player = game_map.get_player(user.display_name, user.id)
                                if (levelNeeded == 0) or (levelNeeded == player.level):
                                    candidates.append(player)
                            except mapparser.MapObjectNotFoundException:
                                continue
                except ValueError:
                    ...
                if candidates:
                    await message.channel.send(random.choice(candidates))
                else:
                    await message.channel.send("–ü–æ —Ç–∞–∫–∏–º –∫—Ä–∏—Ç–µ—Ä–∏—è–º —è –Ω–∏–∫–æ–≥–æ –Ω–µ –Ω–∞—à—ë–ª.")
            elif args[1] == "–∫–∞—Ä—Ç—É":
                card = blackjack.draw_card()
                await message.channel.send(f"–¢—ã –≤—ã—Ç—è–Ω—É–ª {card}")
            elif args[1] == "—É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ":
                await dialog.add_reaction_message(message, config, True)
            else:
                await message.channel.send("–í—ã–±—Ä–∞—Ç—å —á—Ç–æ?")
        else:
            await message.channel.send("–í—ã–±—Ä–∞—Ç—å —á—Ç–æ?")

    elif message.content.lower().startswith(config.BotConfig.prefix + "—Å–±—Ä–æ—Å—å"):
        if str(message.author.id) not in config.BotConfig.admins:
            await message.channel.send("–¢—ã –∫–∞–∫ —Å—é–¥–∞ –ø–æ–ø–∞–ª, —à–∏–∑–∞–Ω—É—Ç—ã–π?")
            return

        args = message.content.split()
        if len(args) >= 2:
            if args[1] == "–∫–æ–ª–æ–¥—É":
                blackjack.shuffle_deck()
                await message.channel.send("–ö–æ–ª–æ–¥–∞ –ø–µ—Ä–µ–º–µ—à–∞–Ω–∞.")
            else:
                await message.channel.send("–°–±—Ä–æ—Å–∏—Ç—å —á—Ç–æ?")
        else:
            await message.channel.send("–°–±—Ä–æ—Å–∏—Ç—å —á—Ç–æ?")

    elif message.content.lower().startswith(config.BotConfig.prefix + "—Å–æ–∑–¥–∞–π"):
        if str(message.author.id) not in config.BotConfig.admins:
            await message.channel.send("–¢—ã –∫–∞–∫ —Å—é–¥–∞ –ø–æ–ø–∞–ª, —à–∏–∑–∞–Ω—É—Ç—ã–π?")
            return

        args = message.content.split()

        if len(args) >= 2:
            if args[1] == "–≥—Ä—É–ø–ø—É":
                await message.delete()

                appendRole: discord.Role = message.role_mentions[0] if message.role_mentions else None
                inGameRole: discord.Role = [role for role in message.guild.roles if role.name == "–≤ –∏–≥—Ä–µ"][0]
                if appendRole is None:
                    await message.channel.send("–£–ø–æ–º—è–Ω–∏ —Ä–æ–ª—å, –æ–Ω–∞ –≤—Å—ë —Ä–∞–≤–Ω–æ —É–¥–∞–ª–∏—Ç—Å—è.")
                    return

                appenders: list[Union[discord.User, discord.Member]] = message.mentions
                if not appenders:
                    await message.channel.send("–£–ø–æ–º—è–Ω–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π, –∫–æ—Ç–æ—Ä—ã–º –ø—Ä–∏—Å–≤–æ–∏—Ç—å —Ä–æ–ª—å. " + \
                                               "–£–ø–æ–º–∏–Ω–∞–Ω–∏—è –≤—Å—ë —Ä–∞–≤–Ω–æ —É–¥–∞–ª—è—Ç—Å—è")
                    return

                for user in appenders:
                    await user.add_roles(appendRole, inGameRole)

                await message.channel.send(f"–ì—Ä—É–ø–ø–∞ <@&{appendRole.id}> —Å—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∞.")
            elif args[1] == "—É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ":
                await dialog.add_reaction_message(message, config, False)
            else:
                await message.channel.send("–°–æ–∑–¥–∞—Ç—å —á—Ç–æ?")
        else:
            await message.channel.send("–°–æ–∑–¥–∞—Ç—å —á—Ç–æ?")

    elif message.content.lower().startswith(config.BotConfig.prefix + "–∫—Ç–æ"):
        if str(message.author.id) not in config.BotConfig.admins:
            await message.channel.send(
                f"–¢—ã –º–æ–∂–µ—à—å –æ—Å–º–∞—Ç—Ä–∏–≤–∞—Ç—å —Ç–æ–ª—å–∫–æ —Å–µ–±—è (`{config.BotConfig.prefix}–∫—Ç–æ —è`)."
            )
            return

        mentions = message.mentions
        if not mentions:
            await message.channel.send(
                "–ù–µ–æ–±—Ö–æ–¥–∏–º–æ —É–ø–æ–º—è–Ω—É—Ç—å –∏–≥—Ä–æ–∫–∞, –∫–æ—Ç–æ—Ä–æ–≥–æ —Ç—ã —Ö–æ—á–µ—à—å –æ—Å–º–æ—Ç—Ä–µ—Ç—å."
            )
            return
        game_map = mapparser.Map(config.MapConfig.path)
        user = mentions[0]
        try:
            player = game_map.get_player(user.display_name, user.id)
            await message.channel.send(dialog.get_player_info_string(game_map, player))
            await dialog.send_player_inventory(message, player)
            await dialog.send_abilities(message, player)
        except mapparser.MapObjectNotFoundException:
            await message.channel.send("–¢–∞–∫–æ–π –∏–≥—Ä–æ–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω.")
            return

    elif message.content.lower().startswith(config.BotConfig.prefix + "—É–¥–∞–ª–∏"):
        if str(message.author.id) not in config.BotConfig.admins:
            await message.channel.send("–¢—ã –∫–∞–∫ —Å—é–¥–∞ –ø–æ–ø–∞–ª, —à–∏–∑–∞–Ω—É—Ç—ã–π?")
            return

        args = message.content.split()
        if len(args) >= 2:
            if args[1] == "—É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ":
                await message.delete()
                if not message.reference:
                    await message.channel.send("–¢—ã –¥–æ–ª–∂–µ–Ω –æ—Ç–≤–µ—Ç–∏—Ç—å –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ, –∫ –∫–æ—Ç–æ—Ä–æ–º—É –ø—Ä–∏–≤—è–∑–∞–Ω—ã —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è.")
                    return

                trigger: ReactionTrigger = config.BotConfig.search_reaction_trigger(message_id=message.reference.message_id)
                if trigger is None:
                    await message.channel.send("–ö —ç—Ç–æ–º—É —Å–æ–æ–±—â–µ–Ω–∏—é –Ω–µ –ø—Ä–∏–≤—è–∑–∞–Ω—ã —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è.")
                    return

                config.BotConfig.remove_reaction_trigger(trigger=trigger)
                config.BotConfig.write_reaction_triggers_file()
                msg = await message.channel.fetch_message(message.reference.message_id)
                await msg.clear_reactions()
            else:
                await message.channel.send("–£–¥–∞–ª–∏—Ç—å —á—Ç–æ?")
        else:
            await message.channel.send("–£–¥–∞–ª–∏—Ç—å —á—Ç–æ?")

    elif message.content.lower().startswith(config.BotConfig.prefix + "—Å–ø—Ä–æ—Å–∏"):
        if str(message.author.id) not in config.BotConfig.admins:
            await message.channel.send("–¢—ã –∫–∞–∫ —Å—é–¥–∞ –ø–æ–ø–∞–ª, —à–∏–∑–∞–Ω—É—Ç—ã–π?")
            return

        args = message.content.split()

        if len(args) >= 2:
            if args[1] == "–≤—Å–µ—Ö" or message.role_mentions:
                await message.delete()

                voting_users = []
                if message.role_mentions:
                    voting_users = message.role_mentions[0].members

                command_line = message.content.split("\n")[0]
                command_args = shlex.split(command_line)
                timeout = 300
                anonymous = False
                can_revote = False
                force_stop_by_admin = True
                force_stop_by_variant = True

                if any(i for i in command_args if i == "-–≤—Ä–µ–º—è"):
                    try:
                        timeout = int(command_args[command_args.index("-–≤—Ä–µ–º—è")+1])
                    except Exception:
                        await message.channel.send("–û–ø—Ü–∏—è `-–≤—Ä–µ–º—è` –≤–≤–µ–¥–µ–Ω–∞ –Ω–µ–≤–µ—Ä–Ω–æ.")
                if any(i for i in command_args if i == "-–∞–Ω–æ–Ω"):
                    anonymous = True
                if any(i for i in command_args if i == "-–ø–µ—Ä–µ–≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏–µ"):
                    can_revote = True
                if any(i for i in command_args if i == "-–∞–¥–º–∏–Ω"):
                    force_stop_by_admin = False
                if any(i for i in command_args if i == "-–≤–µ—Ç–æ"):
                    force_stop_by_variant = False

                if not '"' in message.content.split("\n")[0]:
                    await message.channel.send("–¢—ã –¥–æ–ª–∂–µ–Ω –≤–≤–µ—Å—Ç–∏ –Ω–∞–∑–≤–∞–Ω–∏–µ –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏—è.")
                    return

                title = message.content.split('"')[1]

                view = VoteCommandView(
                    title=title,
                    timeout=timeout,
                    can_revote=can_revote,
                    anonymous=anonymous,
                    force_stop=force_stop_by_admin,
                    admin_id=message.author.id,
                    voting_users=voting_users
                )

                if len(message.content.split("\n")[1::]) > 1:
                    for label in message.content.split("\n")[1::]:
                        if label.startswith("!") and force_stop_by_variant:
                            view.add_item(Button(label=label[1:], style=discord.ButtonStyle.red), True)
                        else:
                            view.add_item(Button(label=label, style=discord.ButtonStyle.primary))
                else:
                    view.add_item(Button(label="–ó–∞", style=discord.ButtonStyle.primary))
                    view.add_item(
                        Button(
                            label="–ü—Ä–æ—Ç–∏–≤",
                            style=discord.ButtonStyle.red if force_stop_by_variant else discord.ButtonStyle.primary),
                        force_stop_by_variant)

                view.message = await message.channel.send(content=view.get_voting_message_str(), view=view)
                await view.message.pin()
        else:
            await message.channel.send("–°–ø—Ä–æ—Å–∏—Ç—å –∫–æ–≥–æ?")

    elif message.content.lower().startswith(
        (config.BotConfig.prefix + "—ç–∫–∏–ø", config.BotConfig.prefix + "—ç–∫–∏–ø–∏—Ä–æ–≤–∫–∞")
        ):
        if str(message.author.id) not in config.BotConfig.admins:
            await message.channel.send("–¢—ã –∫–∞–∫ —Å—é–¥–∞ –ø–æ–ø–∞–ª, —à–∏–∑–∞–Ω—É—Ç—ã–π?")
            return

        if len(message.content.split()) >= 2:
            game_map = mapparser.Map(config.MapConfig.path)
            try:
                objectname = " ".join(message.content.split()[1::])
                inv = game_map.get_objects_inventory(objectname, True)
                formatted_inv = dialog.get_formatted_inventory(inv, False)
                await message.delete()
                await message.channel.send(f"–≠–∫–∏–ø–∏—Ä–æ–≤–∫–∞ {objectname}:\n{formatted_inv}")

            except mapparser.MapObjectNotFoundException:
                await message.channel.send("–û–±—ä–µ–∫—Ç–∞ —Å —Ç–∞–∫–∏–º –∏–º–µ–Ω–µ–º –Ω–µ—Ç –Ω–∞ –∫–∞—Ä—Ç–µ.")
                return
        else:
            await message.channel.send("–í–≤–µ–¥–∏ –Ω–∞–∑–≤–∞–Ω–∏–µ –æ–±—ä–µ–∫—Ç–∞.")

    #endregion

    #region [item-related commands]

    elif message.content.lower().startswith(config.BotConfig.prefix + '–∫–∞—Ä—Ç–∞'):
        data = await get_map_and_player(message)
        if data is not None:
            game_map, player = data
            invItems = command_help.list_inventory_commands(player)
            if '–∫–∞—Ä—Ç–∞' not in invItems:
                await message.channel.send("–£ —Ç–µ–±—è –Ω–µ—Ç –∫–∞—Ä—Ç—ã.")
                return
            floorString = game_map.get_floor_string(player)
            asciiMap = game_map.construct_ascii_map(player, invItems['–∫–∞—Ä—Ç–∞'])
            resp = f'```ansi\n{floorString}\n\n{asciiMap}```'
            await message.reply(resp)

    #endregion

if __name__ == '__main__':
    client.run(config.BotConfig.token)
