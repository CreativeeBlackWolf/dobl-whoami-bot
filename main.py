#!/usr/bin/env python3
import os
import sys
import random
import platform
from typing import Tuple, Union
import discord
from dialog_manager import (send_abilities,
                            send_player_inventory,
                            send_formatted_inventory,
                            get_player_info_string,
                            get_inventory_string,
                            get_abilities_string,
                            add_reaction_message)
from buttons import WhoamiCommandView
from config import Config, ReactionTrigger
import mapparser
import command_help
from player import Player
import casino


config = Config("botconfig.cfg" if os.path.exists("botconfig.cfg") else "config_example.cfg")
intents = discord.Intents.all()
client = discord.Client(intents=intents)

blackjack = casino.Blackjack()


async def get_map_and_player(message: discord.Message) -> (
        Union[Tuple[mapparser.Map, Player], None]
    ):
    try:
        gameMap = mapparser.Map(config.MapConfig.path)
        player = gameMap.get_player(message.author.display_name, message.author.id)

        return (gameMap, player)
    except mapparser.MapObjectNotFoundException:
        await message.channel.send("–¢—ã –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—à—å.")
        return None
    except mapparser.MapObjectWrongIDException:
        await message.channel.send("–¢—ã –º–µ–Ω—è –æ–±–º–∞–Ω—É—Ç—å –ø—ã—Ç–∞–µ—à—å—Å—è?")
        return None

async def get_reaction_trigger_data(payload: discord.RawReactionActionEvent) -> (
        Union[Tuple[discord.Role, discord.Member, str], None]
    ):
    trigger: Union[ReactionTrigger, None] = \
        config.BotConfig.search_reaction_trigger(message_id=payload.message_id)
    if trigger is not None:
        emoji = payload.emoji.id or payload.emoji.name
        if emoji in trigger.emojis:
            reaction_role, reaction_message = trigger.get_data_by_emoji(emoji)

            guild = client.get_guild(payload.guild_id)
            role = guild.get_role(reaction_role)
            member = guild.get_member(payload.user_id)
            return (role, member, reaction_message)
    return None

@client.event
async def on_ready():
    if os.path.exists(".rst"):
        with open(".rst", "r") as f:
            channel: discord.channel.TextChannel = client.get_channel(int(f.read()))
        await channel.send("–ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ –∑–∞–≤–µ—Ä—à—ë–Ω.")
        os.remove(".rst")
    print(f'We have logged in as {client.user}')
    await client.change_presence(activity=discord.Game(name="–Ω–∞–ø–∏—à–∏ .–ø–æ–º–æ–≥–∏"))


@client.event
async def on_raw_reaction_add(payload: discord.RawReactionActionEvent):
    search_result = await get_reaction_trigger_data(payload)
    if search_result is None:
        return
    role, member, reaction_message = search_result
    await member.add_roles(role)
    await member.send(reaction_message.split("/")[0])

@client.event
async def on_raw_reaction_remove(payload: discord.RawReactionActionEvent):
    search_result = await get_reaction_trigger_data(payload)
    if search_result is None:
        return
    role, member, reaction_message = search_result
    await member.remove_roles(role)
    await member.send(reaction_message.split("/")[1])

@client.event
async def on_message(message: discord.Message):
    if message.author == client.user:
        return

    #region [user commands]

    if message.content.lower().startswith(config.BotConfig.prefix + "–ø–æ–º–æ–≥–∏"):
        gameMap = mapparser.Map(config.MapConfig.path)
        player = gameMap.get_player(message.author.display_name, message.author.id)

        splittedMessage = message.content.split()
        if len(splittedMessage) == 1:
            await message.channel.send(command_help.get_commands(player=player))
        elif len(splittedMessage) >= 2:
            if splittedMessage[1] == "–º–Ω–µ":
                await message.channel.send("–°–∞–º —Å–ø—Ä–∞–≤–∏—à—å—Å—è.")
            elif splittedMessage[1] == "–∞–¥–º–∏–Ω—É":
                if str(message.author.id) in config.BotConfig.admins:
                    await message.channel.send(command_help.get_admin_command())
                else:
                    await message.channel.send("–¢—ã –∫—Ç–æ –≤–æ–æ–±—â–µ —Ç–∞–∫–æ–π?")
            else:
                await message.channel.send(command_help.get_commands(" ".join(splittedMessage[1::]), player))

    elif message.content.lower().startswith((config.BotConfig.prefix + '–∫—Ç–æ —è', config.BotConfig.prefix + '—è –∫—Ç–æ')):
        data = await get_map_and_player(message)
        if data is not None:
            gameMap, player = data
            view = WhoamiCommandView(gameMap, player, message.author)
            view.message = await message.reply(get_player_info_string(gameMap, player), view=view)

    elif message.content.lower().startswith(config.BotConfig.prefix + '–ø–æ–∫–∞–∂–∏'):
        data = await get_map_and_player(message)
        if data is not None:
            _, player = data
            args = message.content.lower().split()
            if len(args) == 2:
                if args[1] in ["—Å–∫–∏–ª–ª—ã", "—Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç–∏", "–æ—Å–æ–±–µ–Ω–Ω–æ—Å—Ç–∏",
                               "–Ω–∞–≤—ã–∫–∏", "—Å–ø–µ–ª–ª—ã", "–∞–±–∏–ª–∫–∏"]:
                    await send_abilities(message, player)
                elif args[1] in ["–∏–Ω–≤–µ–Ω—Ç–∞—Ä—å", "—à–º–æ—Ç–∫–∏", "—Ä—é–∫–∑–∞–∫"]:
                    await send_player_inventory(message, player)
                elif args[1] in ["–∫–æ–ª–æ–¥—É"]:
                    if str(message.author.id) not in config.BotConfig.admins:
                        await message.channel.send("–†–∞–∑–º–µ—á—Ç–∞–ª—Å—è.")
                        return
                    await message.author.send(
                        "`" + ", ".join([i.replace("\\", "") for i in blackjack.deck]) + "`"
                    )
                else:
                    await message.channel.send(
                        f'–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –∫–æ–º–∞–Ω–¥—ã:\n{command_help.get_commands("–ø–æ–∫–∞–∂–∏")}'
                    )
            else:
                await message.channel.send(
                    f'–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –∫–æ–º–∞–Ω–¥—ã:\n{command_help.get_commands("–ø–æ–∫–∞–∂–∏")}'
                )

    elif message.content.lower().startswith(config.BotConfig.prefix + '–≥–¥–µ —è'):
        data = await get_map_and_player(message)
        if data is not None:
            gameMap, player = data
            if player.isDead:
                await message.reply("–¢—ã –º—ë—Ä—Ç–≤.")
                return
            resp = f"""```ansi
{gameMap.get_floor_string(player)}

{gameMap.construct_ascii_room(player)}

{gameMap.list_doors_string(player)}
```"""
            await message.reply(resp)

    elif message.content.lower().startswith(config.BotConfig.prefix + "–≥—Ä—É–ø–ø–∞"):
        ingame: bool = False
        groupRole: discord.Role = None
        for role in message.author.roles:
            if role.name.startswith("–≤ –∏–≥—Ä–µ"):
                ingame = True
            elif role.name.startswith("–≥—Ä—É–ø–ø–∞"):
                groupRole = role
                break

        if not ingame:
            await message.channel.send("–¢—ã –Ω–µ –≤ –∏–≥—Ä–µ.")
            return

        gameMap = mapparser.Map(config.MapConfig.path)
        groupMembers = list(groupRole.members) if groupRole is not None else [message.author]
        msg = "```ansi\n"

        for member in groupMembers:
            player = gameMap.get_player(member.display_name, member.id)
            msg += f"{member.display_name}: <[31m{player.HP}/{player.maxHP}[0m> "
            if player.maxMP > 0:
                msg += f"<[34m{player.MP}/{player.maxMP}[0m>"
            msg += "\n"

        msg += "\n```"
        await message.channel.send(msg)

    #endregion

    #region [admin commands]

    elif message.content.lower().startswith(config.BotConfig.prefix + '–∏–Ω–≤–µ–Ω—Ç–∞—Ä—å'):
        if str(message.author.id) not in config.BotConfig.admins:
            await message.channel.send("–¢—ã –∫–∞–∫ —Å—é–¥–∞ –ø–æ–ø–∞–ª, —à–∏–∑–∞–Ω—É—Ç—ã–π?")
            return

        if len(message.content.split("\n")) < 2:
            if len(message.content.split()) >= 2:
                gameMap = mapparser.Map(config.MapConfig.path)
                try:
                    inv = gameMap.get_objects_inventory(" ".join(message.content.split()[1::]))

                except mapparser.MapObjectNotFoundException:
                    await message.channel.send("–û–±—ä–µ–∫—Ç–∞ —Å —Ç–∞–∫–∏–º –∏–º–µ–Ω–µ–º –Ω–µ—Ç –Ω–∞ –∫–∞—Ä—Ç–µ.")
                    return

                await send_formatted_inventory(message, inv, formatInventory=False)
                return

            await message.channel.send("–ê –∏–Ω–≤–µ–Ω—Ç–∞—Ä—å-—Ç–æ –≥–¥–µ?")
            return

        await send_formatted_inventory(message, message.content.split("\n")[1::])

    elif message.content.lower().startswith(config.BotConfig.prefix + "–ø–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏"):
        if str(message.author.id) not in config.BotConfig.admins:
            await message.channel.send("–¢—ã –∫–∞–∫ —Å—é–¥–∞ –ø–æ–ø–∞–ª, —à–∏–∑–∞–Ω—É—Ç—ã–π?")
            return

        await message.channel.send("R.E.S.T.A.R.T protocol engaged...")

        with open(".rst", "w") as f:
            f.write(str(message.channel.id))

        if platform.system() == "Linux":
            os.execv(__file__, sys.argv)
        elif platform.system() == "Windows":
            os.execv(sys.executable, ["python"] + sys.argv)

    elif message.content.lower().startswith(config.BotConfig.prefix + "–≤—ã–±–µ—Ä–∏"):
        if str(message.author.id) not in config.BotConfig.admins:
            await message.channel.send("–¢—ã –∫–∞–∫ —Å—é–¥–∞ –ø–æ–ø–∞–ª, —à–∏–∑–∞–Ω—É—Ç—ã–π?")
            return

        args = message.content.split()
        if len(args) >= 2:
            gameMap = mapparser.Map(config.MapConfig.path)
            if args[1] == "–∏–≥—Ä–æ–∫–∞":
                await message.delete()

                candidates = []
                try:
                    levelNeeded: int = int(args[2]) if len(args) >= 3 and not args[2].startswith("<@&") else 0
                    excludeRole: discord.Role = message.role_mentions[0] if message.role_mentions else None

                    for user in message.guild.members:
                        if user.status == discord.Status.online and \
                        excludeRole not in user.roles:
                            try:
                                player = gameMap.get_player(user.display_name, user.id)
                                if (levelNeeded == 0) or (levelNeeded == player.level):
                                    candidates.append(player)
                            except mapparser.MapObjectNotFoundException:
                                continue    
                except ValueError:
                    ...
                if candidates:
                    await message.channel.send(random.choice(candidates))
                else:
                    await message.channel.send("–ü–æ —Ç–∞–∫–∏–º –∫—Ä–∏—Ç–µ—Ä–∏—è–º —è –Ω–∏–∫–æ–≥–æ –Ω–µ –Ω–∞—à—ë–ª.")
            elif args[1] == "–∫–∞—Ä—Ç—É":
                card = blackjack.draw_card()
                await message.channel.send(f"–¢—ã –≤—ã—Ç—è–Ω—É–ª {card}")
            elif args[1] == "—É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ":
                await add_reaction_message(message, config, True)
            else:
                await message.channel.send("–í—ã–±—Ä–∞—Ç—å —á—Ç–æ?")
        else:
            await message.channel.send("–í—ã–±—Ä–∞—Ç—å —á—Ç–æ?")

    elif message.content.lower().startswith(config.BotConfig.prefix + "—Å–±—Ä–æ—Å—å"):
        if str(message.author.id) not in config.BotConfig.admins:
            await message.channel.send("–¢—ã –∫–∞–∫ —Å—é–¥–∞ –ø–æ–ø–∞–ª, —à–∏–∑–∞–Ω—É—Ç—ã–π?")
            return

        args = message.content.split()
        if len(args) >= 2:
            if args[1] == "–∫–æ–ª–æ–¥—É":
                blackjack.shuffle_deck()
                await message.channel.send("–ö–æ–ª–æ–¥–∞ –ø–µ—Ä–µ–º–µ—à–∞–Ω–∞.")
            else:
                await message.channel.send("–°–±—Ä–æ—Å–∏—Ç—å —á—Ç–æ?")
        else:
            await message.channel.send("–°–±—Ä–æ—Å–∏—Ç—å —á—Ç–æ?")

    elif message.content.lower().startswith(config.BotConfig.prefix + "—Å–æ–∑–¥–∞–π"):
        if str(message.author.id) not in config.BotConfig.admins:
            await message.channel.send("–¢—ã –∫–∞–∫ —Å—é–¥–∞ –ø–æ–ø–∞–ª, —à–∏–∑–∞–Ω—É—Ç—ã–π?")
            return

        args = message.content.split()

        if len(args) >= 2:
            if args[1] == "–≥—Ä—É–ø–ø—É":
                await message.delete()

                appendRole: discord.Role = message.role_mentions[0] if message.role_mentions else None
                inGameRole: discord.Role = [role for role in message.guild.roles if role.name == "–≤ –∏–≥—Ä–µ"][0]
                if appendRole is None:
                    await message.channel.send("–£–ø–æ–º—è–Ω–∏ —Ä–æ–ª—å, –æ–Ω–∞ –≤—Å—ë —Ä–∞–≤–Ω–æ —É–¥–∞–ª–∏—Ç—Å—è.")
                    return

                appenders: list[Union[discord.User, discord.Member]] = message.mentions
                if not appenders:
                    await message.channel.send("–£–ø–æ–º—è–Ω–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π, –∫–æ—Ç–æ—Ä—ã–º –ø—Ä–∏—Å–≤–æ–∏—Ç—å —Ä–æ–ª—å. " + \
                                               "–£–ø–æ–º–∏–Ω–∞–Ω–∏—è –≤—Å—ë —Ä–∞–≤–Ω–æ —É–¥–∞–ª—è—Ç—Å—è")
                    return

                for user in appenders:
                    await user.add_roles(appendRole, inGameRole)

                await message.channel.send(f"–ì—Ä—É–ø–ø–∞ <@&{appendRole.id}> —Å—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∞.")
            elif args[1] == "—É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ":
                await add_reaction_message(message, config, False)
            else:
                await message.channel.send("–°–æ–∑–¥–∞—Ç—å —á—Ç–æ?")
        else:
            await message.channel.send("–°–æ–∑–¥–∞—Ç—å —á—Ç–æ?")

    elif message.content.lower().startswith(config.BotConfig.prefix + "–∫—Ç–æ"):
        if str(message.author.id) not in config.BotConfig.admins:
            await message.channel.send(
                f"–¢—ã –º–æ–∂–µ—à—å –æ—Å–º–∞—Ç—Ä–∏–≤–∞—Ç—å —Ç–æ–ª—å–∫–æ —Å–µ–±—è (`{config.BotConfig.prefix}–∫—Ç–æ —è`)."
            )
            return

        mentions = message.mentions
        if not mentions:
            await message.channel.send(
                "–ù–µ–æ–±—Ö–æ–¥–∏–º–æ —É–ø–æ–º—è–Ω—É—Ç—å –∏–≥—Ä–æ–∫–∞, –∫–æ—Ç–æ—Ä–æ–≥–æ —Ç—ã —Ö–æ—á–µ—à—å –æ—Å–º–æ—Ç—Ä–µ—Ç—å."
            )
            return
        gameMap = mapparser.Map(config.MapConfig.path)
        user = mentions[0]
        try:
            player = gameMap.get_player(user.display_name, user.id)
            await message.channel.send(get_player_info_string(gameMap, player))
            await message.channel.send(get_inventory_string(player))
            await message.channel.send(get_abilities_string(player))
        except mapparser.MapObjectNotFoundException:
            await message.channel.send("–¢–∞–∫–æ–π –∏–≥—Ä–æ–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω.")
            return

    elif message.content.lower().startswith(config.BotConfig.prefix + "—É–¥–∞–ª–∏"):
        if str(message.author.id) not in config.BotConfig.admins:
            await message.channel.send("–¢—ã –∫–∞–∫ —Å—é–¥–∞ –ø–æ–ø–∞–ª, —à–∏–∑–∞–Ω—É—Ç—ã–π?")
            return

        args = message.content.split()
        if len(args) >= 2:
            if args[1] == "—É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ":
                await message.delete()
                if not message.reference:
                    await message.channel.send("–¢—ã –¥–æ–ª–∂–µ–Ω –æ—Ç–≤–µ—Ç–∏—Ç—å –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ, –∫ –∫–æ—Ç–æ—Ä–æ–º—É –ø—Ä–∏–≤—è–∑–∞–Ω—ã —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è.")
                    return

                trigger: ReactionTrigger = config.BotConfig.search_reaction_trigger(message_id=message.reference.message_id)
                if trigger is None:
                    await message.channel.send("–ö —ç—Ç–æ–º—É —Å–æ–æ–±—â–µ–Ω–∏—é –Ω–µ –ø—Ä–∏–≤—è–∑–∞–Ω—ã —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è.")
                    return

                config.BotConfig.remove_reaction_trigger(trigger=trigger)
                config.BotConfig.write_reaction_triggers_file()
                msg = await message.channel.fetch_message(message.reference.message_id)
                await msg.clear_reactions()
            else:
                await message.channel.send("–£–¥–∞–ª–∏—Ç—å —á—Ç–æ?")
        else:
            await message.channel.send("–£–¥–∞–ª–∏—Ç—å —á—Ç–æ?")

    #endregion

    #region [item-related commands]

    elif message.content.lower().startswith(config.BotConfig.prefix + '–∫–∞—Ä—Ç–∞'):
        data = await get_map_and_player(message)
        if data is not None:
            gameMap, player = data
            invItems = command_help.list_inventory_commands(player)
            if '–∫–∞—Ä—Ç–∞' not in invItems:
                await message.channel.send("–£ —Ç–µ–±—è –Ω–µ—Ç –∫–∞—Ä—Ç—ã.")
                return
            floorString = gameMap.get_floor_string(player)
            asciiMap = gameMap.construct_ascii_map(player, invItems['–∫–∞—Ä—Ç–∞'])
            resp = f'```ansi\n{floorString}\n\n{asciiMap}```'
            await message.reply(resp)

    #endregion

if __name__ == '__main__':
    client.run(config.BotConfig.token)
